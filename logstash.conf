# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

# "instanceId"
# "requestQuery"
# "httpVersion"
# "receivedBytes"
# "sentBytes"
# "timeTaken"
# "sslEnabled"

input {
  beats {
    port => 5044
  }
}

filter {
  csv {
    separator => ","
    columns => ["Id","Timestamp","PreciseTimeStamp","ServicePrefix","Region","GatewayId","Tenant","Role","RoleInstance","ResourceId","operationName","time","category","instanceId","clientIP","clientPort","httpMethod","requestUri","userAgent","httpStatus","httpVersion","receivedBytes","sentBytes","timeTaken","sslEnabled","host","requestQuery","CACHE-HIT","SERVER-ROUTED","LOG-ID","SERVER-STATUS","RowKey","__SourceEvent__","__SourceMoniker__"]
    remove_field => ["PreciseTimeStamp","ServicePrefix","GatewayId","Role","RoleInstance","operationName","time","category","RowKey","__SourceEvent__","__SourceMoniker__"]
    remove_field => ["message", "offset", "tags", "prospector", "beat", "input"]
  }

  date {
    match => ["Timestamp" , "ISO8601"]
    target => "@timestamp"
    remove_field => ["Timestamp"]
  }

  grok {
    match => ["source", "%{GREEDYDATA}\\%{USERNAME:folder}\\%{USERNAME:filename}\.csv"]
  }

  mutate {
    rename => {
      "[instanceId]" => "[data][instanceId]"
      "[httpVersion]" => "[data][httpVersion]"
      "[receivedBytes]" => "[data][receivedBytes]"
      "[sentBytes]" => "[data][sentBytes]"
      "[timeTaken]" => "[data][timeTaken]"
      "[sslEnabled]" => "[data][sslEnabled]"

      "[Region]" => "[out][Region]"
      "[Tenant]" => "[out][Tenant]"
      "[ResourceId]" => "[out][ResourceId]"
      "[source]" => "[out][source]"
      "[folder]" => "[out][folder]"
      "[filename]" => "[out][filename]"

      "[CACHE-HIT]" => "[AG][CACHE-HIT]"
      "[SERVER-ROUTED]" => "[AG][SERVER-ROUTED]"
      "[LOG-ID]" => "[AG][LOG-ID]"
      "[SERVER-STATUS]" => "[AG][SERVER-STATUS]"

      "[Id]" => "[@metadata][Id]"
    }
  }
}

output {
  if "_csvparsefailure" in [tags] {
    stdout { codec => rubydebug }
  }

  if "_grokparsefailure" in [tags] {
    stdout { codec => rubydebug }
  }

  if "_jsonparsefailure" in [tags] {
    stdout { codec => rubydebug }
  }

  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "%{[out][folder]}_%{[out][filename]}"
    document_id => "%{[@metadata][Id]}"
  }
}
